{"version":3,"sources":["components/button.js","components/output.js","App.js","index.js"],"names":["Button","props","className","onClick","handleRunClick","loader","btnTxt","Output","align","style","color","output","map","v","require","App","useState","code","setCode","setOutput","setLoader","setBtnTxt","setColor","e","axios","post","url","then","res","status","data","catch","alert","placeholder","value","onValueChange","highlight","languages","jsx","padding","ReactDOM","render","document","getElementById"],"mappings":"iRAEaA,EAAS,SAACC,GACnB,OACI,wBACIC,UAAU,SACVC,QAASF,EAAMG,eAFnB,SAII,qCAAO,mBAAGF,UAAWD,EAAMI,SAA3B,IAA0CJ,EAAMK,aCL/CC,EAAS,SAACN,GACnB,OACI,qBAAKC,UAAU,SAASM,MAAM,OAAOC,MAAO,CAACC,MAAOT,EAAMS,OAA1D,SACKT,EAAMU,OAAOC,KAAI,SAACC,GAAD,OAAM,8BAAMA,U,iBCI1CC,EAAQ,IA8DOC,MA1Df,SAAad,GACX,IA0BA,EAAsBe,mBAAS,CAC7BC,KAAM,4CADR,mBAAKA,EAAL,KAAWC,EAAX,KAEA,EAA0BF,mBAAS,CAAC,MAApC,mBAAKL,EAAL,KAAaQ,EAAb,KAEA,EAA0BH,mBAAS,kBAAnC,mBAAKX,EAAL,KAAae,EAAb,KACA,EAA0BJ,mBAAS,OAAnC,mBAAKV,EAAL,KAAae,EAAb,KACA,EAAwBL,mBAAS,SAAjC,mBAAKN,EAAL,KAAYY,EAAZ,KACA,OACE,sBAAMpB,UAAU,YAAhB,SACA,sBAAKA,UAAU,qBAAf,UACE,2CACA,0EACA,cAAC,EAAD,CAAQE,eAtCW,SAACmB,GACtBH,EAAU,gCACVC,EAAU,QACVG,IAAMC,KAAKC,YAAkBT,GAC5BU,MAAK,SAAAC,GACDA,EAAIC,QAAU,MACfT,EAAU,kBACVC,EAAU,QAETO,EAAIE,KAAJ,KACDR,EAAS,QACTH,EAAU,CAAC,KAAF,mBAAUS,EAAIE,KAAJ,SAGnBR,EAAS,OACTH,EAAU,CAAC,KAAF,mBAAUS,EAAIE,KAAJ,UAErBV,EAAU,kBACVC,EAAU,UAEXU,OAAM,SAAAR,GACLS,MAAMT,MAERH,EAAU,kBACVC,EAAU,QAckChB,OAAUA,EAAQC,OAAUA,IACtE,qBAAKJ,UAAU,wBAAf,SACE,cAAC,IAAD,CACE+B,YAAY,6BACZC,MAAOjB,EAAKA,KACZkB,cAAe,SAAClB,GAAUC,EAAQ,CAACD,KAAMA,KACzCmB,UAAW,SAACnB,GAAD,OAAUmB,oBAAUnB,EAAMoB,YAAUC,MAC/CC,QAAS,GACTrC,UAAU,wBAGd,cAAC,EAAD,CAAQS,OAAQA,EAAQD,MAAOA,UC3DrC8B,IAASC,OAAO,cAAC,EAAD,IACdC,SAASC,eAAe,W","file":"static/js/main.45e1ffae.chunk.js","sourcesContent":["import { React } from 'react';\n\nexport const Button = (props) => {\n    return (\n        <button\n            className=\"button\"\n            onClick={props.handleRunClick}\n        >\n            <span> <i className={props.loader} ></i> {props.btnTxt}</span>\n        </button>\n    );\n}","import { React } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Output = (props) => {\n    return (\n        <div className=\"output\" align=\"left\" style={{color: props.color}}>\n            {props.output.map((v)=> <div>{v}</div>)}\n        </div>\n    );\n}\nOutput.propTypes = {\n    output: PropTypes.arrayOf(PropTypes.string) \n}","import './App.css';\nimport { highlight, languages } from 'prismjs/components/prism-core';\nimport Editor from 'react-simple-code-editor';\nimport 'prismjs/components/prism-clike';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-markup';\nimport React, { useState } from 'react';\nimport {Button} from './components/button'; \nimport {Output} from './components/output';\nimport axios from 'axios';\nrequire('prismjs/components/prism-jsx');\n\nconst url = '.'\n\nfunction App(props){\n  const handleRunClick = (e) =>{\n    setLoader(\"fa fa-circle-o-notch fa-spin\");\n    setBtnTxt(\"STOP\");\n    axios.post(url + '/compile', code)\n    .then(res => {\n      if(res.status >= 400){\n        setLoader(\"fa fa-terminal\");\n        setBtnTxt(\"RUN\");\n      }\n      if(res.data['out']){\n        setColor('blue');\n        setOutput(['>', ...res.data['out']]);\n      }\n      else{\n        setColor('red');\n        setOutput(['>', ...res.data['error']]);\n      }\n      setLoader(\"fa fa-terminal\");\n      setBtnTxt(\"RUN\");\n    })\n    .catch(e => {\n      alert(e)\n    });\n    setLoader(\"fa fa-terminal\");\n    setBtnTxt(\"RUN\");\n  }\n  let [code, setCode] = useState({\n    code: '(vars [(i 2) (j 2)]\\n\\t(print (+ i j)))' });\n  let [output, setOutput] = useState([\">\"]); \n\n  let [loader, setLoader] = useState(\"fa fa-terminal\");\n  let [btnTxt, setBtnTxt] = useState(\"RUN\");\n  let [color, setColor] = useState(\"black\");\n  return (\n    <main className=\"container\">\n    <div className=\"container__content\">\n      <h1>SIMPL Web</h1>\n      <p>Online interpreter for the SIMPL Language</p>\n      <Button handleRunClick = {handleRunClick} loader = {loader} btnTxt = {btnTxt}/>\n      <div className=\"container_editor_area\">\n        <Editor\n          placeholder=\"Type some simpl codeâ€¦\"\n          value={code.code}\n          onValueChange={(code) => {setCode({code: code});}}\n          highlight={(code) => highlight(code, languages.jsx)}\n          padding={10}\n          className=\"container__editor\"\n        />\n      </div>\n      <Output output={output} color={color}/>\n      </div>\n  </main>\n\n  )\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}